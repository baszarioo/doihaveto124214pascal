This is my exercise:
Prepare a program parser in Pascal ( use your own lexer). Input has to be a file witch source code written in Pascal. After the parsing the program should print out on the default output information about a valid/invalid structure of input code, and summary that contains number of program rows, number of used variables, nuber of used instructions {if, while, repeat, etc. } 

Note that analizators (lexer and parser)  have to be written using appropriate resources (lex, flex, yacc, bison), whereas the file with example source code in Pascal language have to be analyzed.


// lekser //:
%{
	#include "parser.tab.h"
	#include <stdio.h>
	#include <stdlib.h>
	int yywrap();
%}

COMMENT \{[^\}]*\}|\(\*[^(\*\))]*\*\)
STRING \'([^\'])*\'
PROGRAM ^program 
WHITESPACE [ \t]+
WRITE (writeln\(.*\);)|(write\(.*\);)
ROW [\n]
digit [0-9]
unsignedInteger {digit}+
i {unsignedInteger}
UNTIL [Tt][uU][Tt][Ee][iI][lL].*|{i}|{STRING};

%%

{COMMENT} { return KOM; }
{ROW} { return ROW; }
{STRING} { return STR; }
{WHITESPACE} {}
{UNTIL} { return UN; }
{PROGRAM} { return PROGRAM; }
"end"  { return END; }
"begin" { return BGN; }
"if" { return IF; }
"for" { return FOR; }
"while" { return WHILE; }
"repeat" { return REPEAT; }
"do" { return DO; }
"else" { return ELSE; }
. {}

%%



//////////////////////////////////////////////////////////////////////////////////////////PARSER

%{

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

int var=0;
int wiersze=0;
int ify=0;
int fory=0;
int komy=0;
int ripity=0;
int rozp=0;
int whaile=0;

int yyerror();
%}

%token KOM UN STR ROW
%token IF FOR WHILE REP ELSE DO END BGN

%% 
main {return 0;};

program: PROGRAM content END content
	;
content :
	| content BGN content END
	| content ROW { wiersze++; }
	| content KOM { komy++; }
	| content REP content UN { ripity++; }
	| content WHILE { whaile++; }
	| content IF { ify++; }
	| content FOR { fory++; }
	;

%%

int main(){
	printf("\n");
	printf("\skanowanie");
	yyparse();
	yylval=1;
	printf("Przeczytano %d wierszow\n",wiersze);
	printf("Przeczytano %d if-ow\n",ify);
	printf("Przeczytano %d for-ow\n",fory);
	printf("Przeczytano %d while-ow\n",whaile};
	printf("Przeczytano %d repeat-ow\n",ripity);
	printf("Przeczytano %d komentarzy\n\n",count_comm);
	printf("Przeczytano %d wszystkich petli\n",ripity + fory+ whaile);

	return 0;
}
int yyerror(){
	printf("BLAD: %s = %d\n", wiersze=yylval);
}
